# Autogenerated using ProtoBuf.jl v1.0.5 on 2022-08-31T16:58:14.621
# original file: /Users/david/Projects/rai-sdk-julia/src/proto/message.proto (proto3 syntax)

import ProtoBuf as PB
using ProtoBuf: OneOf
using EnumX: @enumx

export RelationMetadata, MetadataInfo

struct RelationMetadata
    relation_id::Union{Nothing,RelationId}
    file_name::String
end
PB.default_values(::Type{RelationMetadata}) = (;relation_id = nothing, file_name = "")
PB.field_numbers(::Type{RelationMetadata}) = (;relation_id = 1, file_name = 2)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:RelationMetadata})
    relation_id = Ref{Union{Nothing,RelationId}}(nothing)
    file_name = ""
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 1
            PB.decode!(d, relation_id)
        elseif field_number == 2
            file_name = PB.decode(d, String)
        else
            PB.skip(d, wire_type)
        end
    end
    return RelationMetadata(relation_id[], file_name)
end

function PB.encode(e::PB.AbstractProtoEncoder, x::RelationMetadata)
    initpos = position(e.io)
    !isnothing(x.relation_id) && PB.encode(e, 1, x.relation_id)
    !isempty(x.file_name) && PB.encode(e, 2, x.file_name)
    return position(e.io) - initpos
end
function PB._encoded_size(x::RelationMetadata)
    encoded_size = 0
    !isnothing(x.relation_id) && (encoded_size += PB._encoded_size(x.relation_id, 1))
    !isempty(x.file_name) && (encoded_size += PB._encoded_size(x.file_name, 2))
    return encoded_size
end

struct MetadataInfo
    relations::Vector{RelationMetadata}
end
PB.default_values(::Type{MetadataInfo}) = (;relations = Vector{RelationMetadata}())
PB.field_numbers(::Type{MetadataInfo}) = (;relations = 1)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:MetadataInfo})
    relations = PB.BufferedVector{RelationMetadata}()
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 1
            PB.decode!(d, relations)
        else
            PB.skip(d, wire_type)
        end
    end
    return MetadataInfo(relations[])
end

function PB.encode(e::PB.AbstractProtoEncoder, x::MetadataInfo)
    initpos = position(e.io)
    !isempty(x.relations) && PB.encode(e, 1, x.relations)
    return position(e.io) - initpos
end
function PB._encoded_size(x::MetadataInfo)
    encoded_size = 0
    !isempty(x.relations) && (encoded_size += PB._encoded_size(x.relations, 1))
    return encoded_size
end

# Pretty printer to prevent large amounts of Metadata from being printed.
function Base.show(io::IO, x::MetadataInfo)
    print(io, "MetadataInfo (length=", length(x.relations), ")")
end
